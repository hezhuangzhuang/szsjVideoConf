package com.hw.provider.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hw.provider.chat.bean.LocalFileBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_FILE_BEAN".
*/
public class LocalFileBeanDao extends AbstractDao<LocalFileBean, Void> {

    public static final String TABLENAME = "LOCAL_FILE_BEAN";

    /**
     * Properties of entity LocalFileBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RemotePath = new Property(0, String.class, "remotePath", false, "REMOTE_PATH");
        public final static Property LocalPath = new Property(1, String.class, "localPath", false, "LOCAL_PATH");
    }


    public LocalFileBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LocalFileBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_FILE_BEAN\" (" + //
                "\"REMOTE_PATH\" TEXT UNIQUE ," + // 0: remotePath
                "\"LOCAL_PATH\" TEXT);"); // 1: localPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_FILE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalFileBean entity) {
        stmt.clearBindings();
 
        String remotePath = entity.getRemotePath();
        if (remotePath != null) {
            stmt.bindString(1, remotePath);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(2, localPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalFileBean entity) {
        stmt.clearBindings();
 
        String remotePath = entity.getRemotePath();
        if (remotePath != null) {
            stmt.bindString(1, remotePath);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(2, localPath);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LocalFileBean readEntity(Cursor cursor, int offset) {
        LocalFileBean entity = new LocalFileBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // remotePath
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // localPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalFileBean entity, int offset) {
        entity.setRemotePath(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLocalPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LocalFileBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LocalFileBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(LocalFileBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
